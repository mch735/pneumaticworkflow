[33mcommit f9a75240bd90c86b2db35cc26d6520e34d93ace7[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32m3146__dates_frontend_support_time_zones_for_output_fields[m[33m)[m
Author: Maria Bogdanova <maria.bogdanova@pneumatic.app>
Date:   Wed Oct 2 15:09:39 2024 +0400

    3146 WIP: changing string date to timestamp for server request and displaying date format for the user

[1mdiff --git a/src/public/components/KickoffOutputs/TextOutput.tsx b/src/public/components/KickoffOutputs/TextOutput.tsx[m
[1mindex eec5c44df..22bdcf792 100644[m
[1m--- a/src/public/components/KickoffOutputs/TextOutput.tsx[m
[1m+++ b/src/public/components/KickoffOutputs/TextOutput.tsx[m
[36m@@ -1,5 +1,5 @@[m
 import * as React from 'react';[m
[31m-[m
[32m+[m[32m// import moment from 'moment';[m
 import { RichText } from '../RichText';[m
 import { IExtraField } from '../../types/template';[m
 [m
[36m@@ -9,6 +9,9 @@[m [mexport interface ITextOutputProps extends IExtraField {}[m
 [m
 export function TextOutput({ name, value }: IExtraField) {[m
   const renderValue = () => {[m
[32m+[m[32m    // if (typeof value === 'number') {[m
[32m+[m[32m    //   value = moment.unix(value).format('MMM D, YYYY');[m
[32m+[m[32m    // }[m
     return ([m
       <span className={styles['output__text']}>[m
         <RichText text={value as string} />[m
[1mdiff --git a/src/public/components/TemplateEdit/ExtraFields/Date/ExtraFieldDate.tsx b/src/public/components/TemplateEdit/ExtraFields/Date/ExtraFieldDate.tsx[m
[1mindex 7077c73a3..b3e3d6389 100644[m
[1m--- a/src/public/components/TemplateEdit/ExtraFields/Date/ExtraFieldDate.tsx[m
[1m+++ b/src/public/components/TemplateEdit/ExtraFields/Date/ExtraFieldDate.tsx[m
[36m@@ -2,6 +2,8 @@[m
 /* prettier-ignore */[m
 import * as React from 'react';[m
 import classnames from 'classnames';[m
[32m+[m
[32m+[m[32m// import { set } from 'date-fns';[m
 import { format, parse } from 'date-fns';[m
 [m
 import { getFieldValidator } from '../utils/getFieldValidator';[m
[36m@@ -17,13 +19,15 @@[m [mimport { DatePicker } from '../../../UI/form/DatePicker/container';[m
 import styles from '../../KickoffRedux/KickoffRedux.css';[m
 [m
 const DATE_STRING_TEMPLATE = 'MM/dd/yyyy';[m
[31m-[m
 const getStringFromDate = (date: Date) => format(date, DATE_STRING_TEMPLATE);[m
 const getDateFromString = (dateStr: string | null) => {[m
   if (!dateStr) return null;[m
[31m-[m
   return parse(dateStr, DATE_STRING_TEMPLATE, new Date());[m
 };[m
[32m+[m[32m// const getDateFromTimestamp = (date: number | null) => {[m
[32m+[m[32m//   if (!date) return null;[m
[32m+[m[32m//   return new Date(date * 1000);[m
[32m+[m[32m// };[m
 [m
 export function ExtraFieldDate({[m
   field,[m
[36m@@ -52,6 +56,8 @@[m [mexport function ExtraFieldDate({[m
   );[m
 [m
   const [selectedDate, setSelectedDate] = React.useState<Date | null>(getDateFromString(value as string | null));[m
[32m+[m[32m  // const [selectedDate, setSelectedDate] = React.useState<Date | null>(getDateFromTimestamp(value as number | null));[m
[32m+[m
   const handleChangeDate = (date: Date) => {[m
     if (!date) {[m
       editField({ value: '' });[m
[36m@@ -62,6 +68,10 @@[m [mexport function ExtraFieldDate({[m
 [m
     const strDate = getStringFromDate(date);[m
     editField({ value: strDate });[m
[32m+[m[32m    // const dateWithEndTime = set(date, { hours: 23, minutes: 59, seconds: 59 });[m
[32m+[m[32m    // const timestampDate = dateWithEndTime.getTime() / 1000;[m
[32m+[m[32m    // editField({ value: timestampDate });[m
[32m+[m
     setSelectedDate(date);[m
   };[m
 [m
[1mdiff --git a/src/public/components/UI/form/DatePicker/DatePicker.tsx b/src/public/components/UI/form/DatePicker/DatePicker.tsx[m
[1mindex 56c159d7b..545c9d7d8 100644[m
[1m--- a/src/public/components/UI/form/DatePicker/DatePicker.tsx[m
[1m+++ b/src/public/components/UI/form/DatePicker/DatePicker.tsx[m
[36m@@ -30,6 +30,7 @@[m [mexport function DatePickerComponent({ dateFdw, language, timezone, selected, onC[m
         // Removing the timezone so that the library does not format the date in the time zone set by the browser[m
         selected ? (moment(selected).tz(timezone, false).format('YYYY-MM-DDTHH:mm:ss') as unknown as Date) : null[m
       }[m
[32m+[m[32m      dateFormat="MMM dd, yyyy"[m
       calendarStartDay={dateFdw}[m
       utcOffset={timezone}[m
       // Setting the selected date as the time zone date set by the user[m
[1mdiff --git a/src/public/types/template.ts b/src/public/types/template.ts[m
[1mindex a05c2a27c..0445279b7 100644[m
[1m--- a/src/public/types/template.ts[m
[1m+++ b/src/public/types/template.ts[m
[36m@@ -92,12 +92,8 @@[m [mexport interface ITemplateResponse extends Omit<ITemplate, 'id' | 'tasks'> {[m
   tasks: ITemplateTaskResponse[];[m
 }[m
 [m
[31m-export interface ITemplateTaskResponse extends Omit<ITemplateTask,[m
[31m-| 'uuid'[m
[31m-| 'conditions'[m
[31m-| 'rawDueDate'[m
[31m-| 'apiName'[m
[31m-| 'id'> {[m
[32m+[m[32mexport interface ITemplateTaskResponse[m
[32m+[m[32m  extends Omit<ITemplateTask, 'uuid' | 'conditions' | 'rawDueDate' | 'apiName' | 'id'> {[m
   id: number;[m
   conditions: IConditionResponse[];[m
   rawDueDate: IDueDateAPI | null;[m
[36m@@ -109,10 +105,7 @@[m [mexport interface ITemplateRequest extends Omit<ITemplate, 'tasks'> {[m
   tasks: ITemplateTaskRequest[];[m
 }[m
 [m
[31m-export interface ITemplateTaskRequest extends Omit<ITemplateTask,[m
[31m-  | 'uuid'[m
[31m-  | 'conditions'[m
[31m-  | 'rawDueDate'> {[m
[32m+[m[32mexport interface ITemplateTaskRequest extends Omit<ITemplateTask, 'uuid' | 'conditions' | 'rawDueDate'> {[m
   conditions: IConditionResponse[];[m
   rawDueDate: IDueDateAPI | null;[m
 }[m
[36m@@ -177,12 +170,12 @@[m [mexport interface IExtraField {[m
   attachments?: TUploadedFile[];[m
   order: number;[m
 }[m
[31m-[m
 export type TExtraFieldValue = TExtraFieldSingleValue | TExtraFieldMultipleValue | null;[m
[32m+[m[32m// export type TExtraFieldValue = TExtraFieldSingleValue | TExtraFieldMultipleValue | TExtraFieldTimestampValue | null;[m
 [m
 export type TExtraFieldSingleValue = string;[m
 export type TExtraFieldMultipleValue = string[];[m
[31m-[m
[32m+[m[32m// export type TExtraFieldTimestampValue = number;[m
 export interface IExtraFieldSelection {[m
   id?: number;[m
   apiName: string;[m
[36m@@ -243,5 +236,5 @@[m [mexport enum ETemplateParts {[m
 export type TAITemplateGenerationStatus = 'initial' | 'generating' | 'generated';[m
 [m
 export type TTemplateWithTasksOnly = Pick<ITemplate, 'name'> & {[m
[31m-  tasks: Pick<ITemplateTask, 'name' | 'description'>[][m
[32m+[m[32m  tasks: Pick<ITemplateTask, 'name' | 'description'>[];[m
 };[m
